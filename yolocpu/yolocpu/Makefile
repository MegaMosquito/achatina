# A driver that calls the yolo detector, and pushes data to mqtt and kafka

# ----------------------------------------------------------------------------

# You must always use the Horizon name for architecture (`hzn architecture`)
export ARCH ?= $(shell hzn architecture)

# Import variables from hzn.json (file is generated by last target in this file)
-include .hzn.json.tmp.mk

# ----------------------------------------------------------------------------

# Build the docker container
build: check_id
	docker build -t $(DOCKERHUB_ID)/$(SERVICE_NAME)_$(ARCH):$(SERVICE_VERSION) -f ./Dockerfile.$(ARCH) .

# Push the docker container to the DockerHub registry
push: check_id
	docker push $(DOCKERHUB_ID)/$(SERVICE_NAME)_$(ARCH):$(SERVICE_VERSION)

# Publish a Horizon service (per service.json) and pull image to get its sha256
publish-service: check_id
	DOCKER_IMAGE_BASE="$(DOCKERHUB_ID)/$(SERVICE_NAME)" hzn exchange service publish -f service.json --pull-image

# Remove the local container image
clean: check_id
	@docker rm -f ${SERVICE_NAME} 2>/dev/null || :
	@docker rmi $(DOCKERHUB_ID)/$(SERVICE_NAME)_$(ARCH):$(SERVICE_VERSION) 2>/dev/null || :
	@rm -f .hzn.json.tmp.mk

# ----------------------------------------------------------------------------

check_id:
	@if [ -z "${DOCKERHUB_ID}" ]; \
          then { echo "***** ERROR: \"DOCKERHUB_ID\" is not set!"; exit 1; }; \
          else echo "  NOTE: Using DockerHubID: \"${DOCKERHUB_ID}\""; \
        fi

HOST_INTERFACE:=$(word 5, $(shell sh -c "ip route | grep default | head -1"))
HOST_IP_ADDRESS:= $(shell sh -c "ip addr | egrep -A 3 'inet .*${HOST_INTERFACE}' | head -1 | grep '    inet ' | sed 's/^    inet //;s|/.*||'")
dev: check_id
	@if [ -z "${CAM_URL}" ]; \
          then echo "  Warning: \"CAM_URL\" is not set! Using default."; \
          else echo "  NOTE: Using camera URL: ${CAM_URL}"; \
        fi
	-docker rm -f ${SERVICE_NAME} 2>/dev/null || :
	docker run -it -v `pwd`:/outside \
	   -e HOST_IP="${HOST_IP_ADDRESS}" \
	   -e HZN_DEVICE_ID="${HZN_DEVICE_ID}" \
	   -e EVENTSTREAMS_BROKER_URLS="${EVENTSTREAMS_BROKER_URLS}" \
	   -e EVENTSTREAMS_API_KEY="${EVENTSTREAMS_API_KEY}" \
	   -e EVENTSTREAMS_PUB_TOPIC="${EVENTSTREAMS_PUB_TOPIC}" \
	   -e CAM_URL="${CAM_URL}" \
	   --name ${SERVICE_NAME} \
	   --network mqtt-net --network-alias ${SERVICE_NAME} \
	   $(DOCKERHUB_ID)/$(SERVICE_NAME)_$(ARCH):$(SERVICE_VERSION) /bin/sh

test: check_id
	@if [ -z "${CAM_URL}" ]; \
          then echo "  Warning: \"CAM_URL\" is not set! Using default."; \
          else echo "  NOTE: Using camera URL: ${CAM_URL}"; \
        fi
	-docker rm -f ${SERVICE_NAME} 2>/dev/null || :
	docker run --rm -d \
	   -e HOST_IP="${HOST_IP_ADDRESS}" \
	   -e HZN_DEVICE_ID="${HZN_DEVICE_ID}" \
	   -e EVENTSTREAMS_BROKER_URLS="${EVENTSTREAMS_BROKER_URLS}" \
	   -e EVENTSTREAMS_API_KEY="${EVENTSTREAMS_API_KEY}" \
	   -e EVENTSTREAMS_PUB_TOPIC="${EVENTSTREAMS_PUB_TOPIC}" \
	   -e CAM_URL="${CAM_URL}" \
	   --name ${SERVICE_NAME} \
	   --network mqtt-net --network-alias ${SERVICE_NAME} \
	   $(DOCKERHUB_ID)/$(SERVICE_NAME)_$(ARCH):$(SERVICE_VERSION)

# ----------------------------------------------------------------------------

# This imports the variables from hzn.json
.hzn.json.tmp.mk: hzn.json
	@ hzn util configconv -f $< > $@

